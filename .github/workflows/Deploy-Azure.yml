name: Deploy to Azure

on:
    push:
        branches:
            - '*'

permissions:
    id-token: write
    contents: read

env:
    RESOURCE_GROUP: RG-CALL_FOR_CODE-MARCH
    LOCATION: francecentral
    CLEAN_BRANCH_NAME: ${{ github.ref_name }}
    IMAGE_NAME: ${{ secrets.AZURE_ACR_SERVER }}/myapp:${{ github.sha }}

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Install Docker Compose
              run: sudo apt-get update && sudo apt-get install -y docker-compose

            - name: Login to Azure with SP
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Login to Azure Container Registry (ACR)
              run: |
                echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_SERVER }} -u ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin
          
            - name: Normalize branch name for DNS
              run: |
                CLEAN_BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-' | sed 's/^-*//g' | sed 's/-*$//g' | cut -c1-63)
                echo "CLEAN_BRANCH_NAME=$CLEAN_BRANCH_NAME" >> $GITHUB_ENV
              
            - name: Delete existing container (if exists)
              run: |
                az container delete --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} --yes || true
                
          
            - name: Build and push Docker image
              run: |
                echo "Building API service from API/docker-compose.yml"
                cd API
                docker-compose build
                docker images
                docker pull nginx:latest
                services=( "nginx" "contribute" "data" "generator" "maps" "traitement")
                for service in "${services[@]}"
                do
                  echo "Building $service"
                  IMAGE_NAME="${{ secrets.AZURE_ACR_SERVER }}/${service}:${{ github.sha }}"
                  if [ "$service" == "nginx" ]; then
                    IMAGE_ID="nginx:latest"
                  else
                    IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "api_${service}:latest" | head -n 1)
                  fi
                  if [ -z "$IMAGE_ID" ]; then
                    echo "Erreur: Impossible de trouver l'image pour $service"
                    exit 1
                  fi
                  echo "Tagging and pushing $service ($IMAGE_ID)"
                  docker tag "$IMAGE_ID" "$IMAGE_NAME"
                  docker push "$IMAGE_NAME"
                done

              
            - name: Create ACI with Contribute first
              run: |
                echo "üöÄ Cr√©ation de l'ACI avec contribute..."
                az container create --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} \
                  --image ${{ secrets.AZURE_ACR_SERVER }}/contribute:${{ env.GITHUB_SHA }} \
                  --cpu 0.5 --memory 1 --ports 8001 --os-type Linux \
                  --dns-name-label callforcode-${{ env.CLEAN_BRANCH_NAME }} \
                  --registry-login-server ${{ secrets.AZURE_ACR_SERVER }} --registry-username ${{ secrets.AZURE_ACR_USERNAME }} --registry-password ${{ secrets.AZURE_ACR_PASSWORD }}

            - name: Wait for Contribute to be Running
              run: |
                echo "Attente du d√©marrage de contribute..."
                while [[ "$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} --query "instanceView.state" -o tsv)" != "Running" ]]; do
                  echo "En attente..."
                  sleep 10
                done
                echo "Contribute est maintenant en cours d'ex√©cution."


    
            - name: Add services one by one
              run: |
                    services=( "data" "generator" "maps" "traitement" )
                    ports=( 8003 8004 8005 8006 )
                    
                    for i in "${!services[@]}"; do
                      SERVICE=${services[$i]}
                      PORT=${ports[$i]}
    
                      echo "Ajout du service $SERVICE avec le port $PORT..."
                      az container create --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} \
                        --image ${{ secrets.AZURE_ACR_SERVER }}/$SERVICE:${{ github.sha }} \
                        --cpu 0.5 --memory 1 --ports $PORT --os-type Linux \
                        --registry-login-server ${{ secrets.AZURE_ACR_SERVER }} --registry-username ${{ secrets.AZURE_ACR_USERNAME }} --registry-password ${{ secrets.AZURE_ACR_PASSWORD }}
    
                      echo "Attente du d√©marrage de $SERVICE..."
                      while [[ "$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} --query "instanceView.state" -o tsv)" != "Running" ]]; do
                        echo "En attente..."
                        sleep 10
                      done
                      echo "$SERVICE est maintenant en cours d'ex√©cution."
                    done
    
            - name: Add Nginx last
              run: |
                    echo "Ajout de nginx en dernier..."
                    az container create --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} \
                      --image ${{secrets.AZURE_ACR_SERVER }}/nginx:${{ github.sha }} \
                      --cpu 0.5 --memory 1 --ports 8080 --os-type Linux \
                      --registry-login-server ${{ secrets.AZURE_ACR_SERVER }} --registry-username ${{ secrets.AZURE_ACR_USERNAME }} --registry-password ${{ secrets.AZURE_ACR_PASSWORD }}
    
                    echo "Attente du d√©marrage de nginx..."
                    while [[ "$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} --query "instanceView.state" -o tsv)" != "Running" ]]; do
                      echo "En attente..."
                      sleep 10
                    done
                    echo "Nginx est maintenant en cours d'ex√©cution."
    
            - name: Verify Deployment
              run: |
                    STATUS=$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} --query "instanceView.state" -o tsv)
                    echo "√âtat du conteneur : $STATUS"
                    if [[ "$STATUS" != "Running" ]]; then
                        echo "D√©ploiement √©chou√©, v√©rifiez les logs sur Azure."
                        exit 1
                    fi