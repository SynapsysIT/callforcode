name: Deploy to Azure

on:
    push:
        branches:
            - '*'

permissions:
    id-token: write
    contents: read

env:
    RESOURCE_GROUP: RG-CALL_FOR_CODE-MARCH
    LOCATION: francecentral
    CLEAN_BRANCH_NAME: ${{ github.ref_name }}
    IMAGE_NAME: ${{ secrets.AZURE_ACR_SERVER }}/myapp:${{ github.sha }}

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Install Docker Compose
              run: sudo apt-get update && sudo apt-get install -y docker-compose

            - name: Login to Azure with SP
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Login to Azure Container Registry (ACR)
              run: |
                echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_SERVER }} -u ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin
          
            - name: Normalize branch name for DNS
              run: |
                CLEAN_BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-' | sed 's/^-*//g' | sed 's/-*$//g' | cut -c1-63)
                echo "CLEAN_BRANCH_NAME=$CLEAN_BRANCH_NAME" >> $GITHUB_ENV
              

            - name: Build and push Docker image
              run: |
                echo "Building API service from API/docker-compose.yml"
                cd API
                docker-compose build
                docker images
                docker pull nginx:latest
                services=( "nginx" "contribute" "data" "generator" "maps" "traitement")
                for service in "${services[@]}"
                do
                  echo "Building $service"
                  IMAGE_NAME="${{ secrets.AZURE_ACR_SERVER }}/${service}:${{ github.sha }}"
                  if [ "$service" == "nginx" ]; then
                    IMAGE_ID="nginx:latest"
                  else
                    IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "api_${service}:latest" | head -n 1)
                  fi
                  if [ -z "$IMAGE_ID" ]; then
                    echo "Erreur: Impossible de trouver l'image pour $service"
                    exit 1
                  fi
                  echo "Tagging and pushing $service ($IMAGE_ID)"
                  docker tag "$IMAGE_ID" "$IMAGE_NAME"
                  docker push "$IMAGE_NAME"
                done

            - name: Delete existing container (if exists)
              run: |
                az container delete --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLEAN_BRANCH_NAME }} --yes || true
              
            - name: Generate ACI YAML file
              run: |
                  cat <<EOF > API/aci_generated.yml
                  apiVersion: '2021-07-01'
                  location: francecentral
                  name: callforcode-${{ env.CLEAN_BRANCH_NAME }}
              
                  properties:
                    containers:
                      - name: nginx
                        properties:
                          image: ${{ secrets.AZURE_ACR_SERVER }}/nginx:${{ github.sha }}
                          resources:
                            requests:
                              cpu: 0.5
                              memoryInGB: 1
                          ports:
                            - port: 8080
                          dependsOn:
                            - contribute
                            - data
                            - generator
                            - maps
                            - traitement
                      - name: contribute
                        properties:
                          image: ${{ secrets.AZURE_ACR_SERVER }}/contribute:${{ github.sha }}
                          resources:
                            requests:
                              cpu: 0.5
                              memoryInGB: 1
                          ports:
                            - port: 8001
                      - name: data
                        properties:
                          image: ${{ secrets.AZURE_ACR_SERVER }}/data:${{ github.sha }}
                          resources:
                            requests:
                              cpu: 0.5
                              memoryInGB: 1
                          ports:
                            - port: 8003
                      - name: generator
                        properties:
                          image: ${{ secrets.AZURE_ACR_SERVER }}/generator:${{ github.sha }}
                          resources:
                            requests:
                              cpu: 0.5
                              memoryInGB: 1
                          ports:
                            - port: 8004
                      - name: maps
                        properties:
                          image: ${{ secrets.AZURE_ACR_SERVER }}/maps:${{ github.sha }}
                          resources:
                            requests:
                              cpu: 0.5
                              memoryInGB: 1
                          ports:
                            - port: 8005
                      - name: traitement
                        properties:
                          image: ${{ secrets.AZURE_ACR_SERVER }}/traitement:${{ github.sha }}
                          resources:
                            requests:
                              cpu: 0.5
                              memoryInGB: 1
                          ports:
                            - port: 8006
                    osType: Linux
                    ipAddress:
                      type: Public
                      dnsNameLabel: callforcode-${{ env.CLEAN_BRANCH_NAME }}
                      ports:
                        - protocol: TCP
                          port: 8080
                        - protocol: TCP
                          port: 8001
                        - protocol: TCP
                          port: 8003
                        - protocol: TCP
                          port: 8004
                        - protocol: TCP
                          port: 8005
                        - protocol: TCP
                          port: 8006
                    restartPolicy: Always
                    imageRegistryCredentials:
                      - server: ${{ secrets.AZURE_ACR_SERVER }}
                        username: ${{ secrets.AZURE_ACR_USERNAME }}
                        password: ${{ secrets.AZURE_ACR_PASSWORD }}
                  EOF
                  cat API/aci_generated.yml
              
            - name: Deploy to Azure Container Instances (ACI)
              run: |
                az container create --resource-group ${{ env.RESOURCE_GROUP }} --file API/aci_generated.yml

            - name: Verify deployment
              run: |
                STATUS=$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name callforcode-${{ env.CLEAN_BRANCH_NAME }} --query "instanceView.state" -o tsv)
                if [[ "$STATUS" != "Running" ]]; then
                    echo "Deployment failed! Check Azure logs."
                    exit 1
                fi
                az container list --resource-group RG-CALL_FOR_CODE-MARCH --query "[].{Name:name, Status:instanceView.state}" --output table
