name: Deploy to Azure

on:
    push:
        branches:
            - '*'

permissions:
    id-token: write
    contents: read

env:
    RESOURCE_GROUP: RG-CALL_FOR_CODE-MARCH
    LOCATION: francecentral
    VM_NAME: callforcode-${{ github.ref_name }}
    VM_ADMIN: azureuser
    VM_IMAGE: Ubuntu2404
    VM_SIZE: Standard_B1s
    PUBLIC_IP_NAME: callforcode-${{ github.ref_name }}-ip
    VM_IP: ''

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Install sshpass (for password-based SSH)
              run: sudo apt-get install -y sshpass

            - name: Login to Azure with SP
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Create Azure VM if not exists
              run: |
                  echo "Vérification et création de la VM si nécessaire..."
                  
                  VM_EXISTS=$(az vm list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='${{ env.VM_NAME }}'].name" -o tsv)
                  
                  if [[ -z "$VM_EXISTS" ]]; then
                    echo "Création de la VM..."
                    az vm create --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.VM_NAME }} \
                      --image ${{ env.VM_IMAGE }} --size ${{ env.VM_SIZE }} --admin-username ${{ env.VM_ADMIN }} \
                      --admin-password ${{ secrets.AZURE_VM_PASSWORD }} --public-ip-address ${{ env.PUBLIC_IP_NAME }} --custom-data cloud-init.txt
                  else
                    echo "La VM existe déjà."
                  fi

            - name: Get VM Public IP
              run: |
                echo "Récupération de l'IP publique de la VM..."
                VM_IP=$(az vm show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.VM_NAME }} --show-details --query publicIps -o tsv)
                echo "VM_IP=$VM_IP" >> $GITHUB_ENV
    
            - name: Wait for VM to be ready
              run: |
                    echo "Attente que la VM soit accessible en SSH..."
                    sleep 30
                    while ! nc -z ${{ env.VM_IP }} 22; do   
                      echo "Attente..."
                      sleep 5
                    done
                    echo "La VM est accessible."

            - name: Configure firewall rules on VM
              run: |
                echo "Configuration des règles iptables pour ouvrir les ports..."
                sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no azureuser@${{ env.VM_IP }} << 'EOF'
                  sudo iptables -A INPUT -p tcp --dport 8080 -j ACCEPT
                EOF
            
            - name: Open necessary ports in NSG
              run: |
                echo "Ajout des règles NSG pour ouvrir les ports..."
                az network nsg rule create --resource-group RG-CALL_FOR_CODE-MARCH --nsg-name callforcode-${{ github.ref_name }}NSG --name AllowAPIPorts --priority 500 --direction Inbound --access Allow --protocol Tcp --source-address-prefixes '*' --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 8001 8003 8004 8005 8006 8080


            - name: Send only required project files to VM
              run: |
                echo "Envoi des fichiers nécessaires vers la VM..."
                pwd
                # Définir le bon répertoire (si les fichiers sont dans /API)
                cd $GITHUB_WORKSPACE/API
                pwd
                # Supprimer les anciens fichiers sur la VM
                sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VM_ADMIN }}@${{ env.VM_IP }} "rm -rf /home/${{ env.VM_ADMIN }}/project"

                # Copier uniquement les fichiers nécessaires
                sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" scp -o StrictHostKeyChecking=no -r docker-compose.yml contribute data generator maps traitement nginx ${{ env.VM_ADMIN }}@${{ env.VM_IP }}:/home/${{ env.VM_ADMIN }}/API/
                echo "Fichiers copiés avec succès."

      
            - name: Deploy Docker Compose on VM
              run: |
                echo "Déploiement de l'application avec Docker Compose..."
                sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VM_ADMIN }}@${{ env.VM_IP }} << 'EOF'
                  cd /home/${{ env.VM_ADMIN }}/API
                  docker-compose down || true
                  docker-compose up -d
                EOF
        
            - name: Verify Deployment
              run: |
                echo "Vérification que les conteneurs sont bien démarrés..."
                sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VM_ADMIN }}@${{ env.VM_IP }} "docker ps"






